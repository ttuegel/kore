Definition
    { definitionAttributes = Attributes []
    , definitionModules =
        [ Module
            { moduleName = ModuleName "BOOL"
            , moduleSentences =
                [ ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Bool" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "true" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "false" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "andBool" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "notBool" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "X" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                                        { forallSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , forallVariable =
                                                            Variable
                                                                { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , forallChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                                        { existsSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , existsVariable =
                                                                            Variable
                                                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                , variableCounter = Nothing
                                                                                , variableSort =
                                                                                    SortActualSort SortActual
                                                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                }
                                                                        , existsChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                                        { equalsOperandSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        , equalsResultSort =
                                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                                        , equalsFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "andBool" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , equalsSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "X" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                        { existsSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , existsVariable =
                                                            Variable
                                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , existsChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                        { equalsOperandSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , equalsResultSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , equalsFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , equalsSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (OrPattern Or
                                        { orSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , orFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        , orSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (NotPattern Not
                                        { notSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , notChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "andBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "andBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "INT"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "BOOL"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Int" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "zero" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "succ" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "one" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "two" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "three" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "plusInt" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "minusInt" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "divInt" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "leqInt" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "neqInt" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "LIST"
            , moduleSentences =
                [ ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "List" AstLocationNone) :: Id Object
                    , sentenceSortParameters =
                        [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                        ]
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "nil" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "cons" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        , SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "append" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "listItem" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "SET"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "BOOL"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Set" AstLocationNone) :: Id Object
                    , sentenceSortParameters =
                        [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                        ]
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "emptySet" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "setItem" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "union" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "inSet" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        , SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                                                , sortActualSorts =
                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "union" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                                                                                , sortActualSorts =
                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "emptySet" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "MAP"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "SET"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Map" AstLocationNone) :: Id Object
                    , sentenceSortParameters =
                        [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                        , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                        ]
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "bind" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                                , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "emp" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                                , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "merge" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                                , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "keys" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                                , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Set" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "ID"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "INT"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Id" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "id" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "id" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "id" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "id" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                                        { andSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , andFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , andSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "CONTEXT"
            , moduleSentences =
                [ ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Ctxt" AstLocationNone) :: Id Object
                    , sentenceSortParameters =
                        [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                        , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                        ]
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "app" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                                , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        ]
                    , sentenceSymbolReturnSort =
                        SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "gamma" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S1" AstLocationNone) :: Id Object)
                                , SortVariable ((Id "S2" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "C" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                        , sortActualSorts =
                                                            [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                            , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                            ]
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                                        { forallSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , forallVariable =
                                                            Variable
                                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                }
                                                        , forallChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                                        { existsSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , existsVariable =
                                                                            Variable
                                                                                { variableName = (Id "Z" AstLocationNone) :: Id Object
                                                                                , variableCounter = Nothing
                                                                                , variableSort =
                                                                                    SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                }
                                                                        , existsChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                                        { equalsOperandSort =
                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                        , equalsResultSort =
                                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                                        , equalsFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts =
                                                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                                    ]
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , equalsSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Z" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                                        { forallSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , forallVariable =
                                                            Variable
                                                                { variableName = (Id "BODY" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                }
                                                        , forallChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                                        { existsSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , existsVariable =
                                                                            Variable
                                                                                { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                                , variableCounter = Nothing
                                                                                , variableSort =
                                                                                    SortActualSort SortActual
                                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts =
                                                                                            [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                            , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                            ]
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                }
                                                                        , existsChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                                        { equalsOperandSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        , equalsResultSort =
                                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                                        , equalsFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "BODY" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , equalsSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "idctxt" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "idctxt" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "C1" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                , sortActualSorts =
                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                    , SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "C2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                    , SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "C1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                    , SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "C2" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts =
                                                                                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                                    , SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                                    ]
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "ARROW"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "CONTEXT"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "K" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "asK" AstLocationNone) :: Id Object
                            , symbolParams =
                                [ SortVariable ((Id "S" AstLocationNone) :: Id Object)
                                ]
                            }
                    , sentenceSymbolSorts =
                        [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "K" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        , UnifiedMeta (SortVariable ((Id "#R" AstLocationNone) :: Id Meta))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortVariableSort (SortVariable ((Id "#R" AstLocationNone) :: Id Meta))
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (NotPattern Not
                                                        { notSort =
                                                            SortVariableSort (SortVariable ((Id "#R" AstLocationNone) :: Id Meta))
                                                        , notChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (EqualsPattern Equals
                                                                        { equalsOperandSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "#Sort" AstLocationNone) :: Id Meta
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , equalsResultSort =
                                                                            SortVariableSort (SortVariable ((Id "#R" AstLocationNone) :: Id Meta))
                                                                        , equalsFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (VariablePattern Variable
                                                                                        { variableName = (Id "#S1" AstLocationNone) :: Id Meta
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "#Sort" AstLocationNone) :: Id Meta
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , equalsSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (VariablePattern Variable
                                                                                        { variableName = (Id "#S2" AstLocationNone) :: Id Meta
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "#Sort" AstLocationNone) :: Id Meta
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "#provable" AstLocationNone) :: Id Meta
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "#R" AstLocationNone) :: Id Meta))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (NotPattern Not
                                                                        { notSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , notChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                                                        { andSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        , andFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , andSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                                        { andSort =
                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                        , andFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , andSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "arrow" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "K" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "K" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "K" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "nothing" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "K" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "K1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "K2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K3" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K1" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "K2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "K3" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "nothing" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "K" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "nothing" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "K" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K1" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K2" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "K2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "K1" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                        , UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts =
                                                                                            [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                            , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                            ]
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortVariableSort (SortVariable ((Id "S1" AstLocationNone) :: Id Object))
                                                                                                    , SortVariableSort (SortVariable ((Id "S2" AstLocationNone) :: Id Object))
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "IMP-SYNTAX"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "BOOL"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "INT"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "LIST"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "SET"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "MAP"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "ID"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "ARROW"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "CONTEXT"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "AExp" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                                        { andSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , andFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , andSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "I" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                        { existsSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , existsVariable =
                                                            Variable
                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , existsChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                        { equalsOperandSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , equalsResultSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , equalsFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , equalsSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "idAsAExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "idAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "idAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "idAsAExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                                        { andSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , andFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , andSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "Id" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                        { existsSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , existsVariable =
                                                            Variable
                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , existsChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                        { equalsOperandSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , equalsResultSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , equalsFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "idAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , equalsSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "minusAExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "I" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                        { existsSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , existsVariable =
                                                            Variable
                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , existsChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                        { equalsOperandSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , equalsResultSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , equalsFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "minusAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , equalsSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren = []
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "E1" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                                        { forallSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , forallVariable =
                                                            Variable
                                                                { variableName = (Id "E2" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , forallChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                                        { existsSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , existsVariable =
                                                                            Variable
                                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                , variableCounter = Nothing
                                                                                , variableSort =
                                                                                    SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                }
                                                                        , existsChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                                        { equalsOperandSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        , equalsResultSort =
                                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                                        , equalsFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "E1" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "E2" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , equalsSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "divAExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "divAExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "2"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren = []
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "E1" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                                        { forallSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , forallVariable =
                                                            Variable
                                                                { variableName = (Id "E2" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , forallChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                                        { existsSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , existsVariable =
                                                                            Variable
                                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                , variableCounter = Nothing
                                                                                , variableSort =
                                                                                    SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                }
                                                                        , existsChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                                        { equalsOperandSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        , equalsResultSort =
                                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                                        , equalsFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "E1" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "E2" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , equalsSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "plusAExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "plusAExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "2"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "BExp" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (AndPattern And
                                                                        { andSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , andFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , andSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "B" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                        { existsSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , existsVariable =
                                                            Variable
                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , existsChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                        { equalsOperandSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , equalsResultSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , equalsFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , equalsSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "seqstrict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren = []
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                        { forallSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , forallVariable =
                                            Variable
                                                { variableName = (Id "E1" AstLocationNone) :: Id Object
                                                , variableCounter = Nothing
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                }
                                        , forallChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ForallPattern Forall
                                                        { forallSort =
                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                        , forallVariable =
                                                            Variable
                                                                { variableName = (Id "E2" AstLocationNone) :: Id Object
                                                                , variableCounter = Nothing
                                                                , variableSort =
                                                                    SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                }
                                                        , forallChild =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ExistsPattern Exists
                                                                        { existsSort =
                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                        , existsVariable =
                                                                            Variable
                                                                                { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                , variableCounter = Nothing
                                                                                , variableSort =
                                                                                    SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                }
                                                                        , existsChild =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                                                        { equalsOperandSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        , equalsResultSort =
                                                                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                                                                        , equalsFirst =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "E1" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "E2" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        , equalsSecond =
                                                                                            CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "seqstrictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "leqBExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "seqstrictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "leqBExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "2"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "notBExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren = []
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "notBExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "notBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "notBExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "andBExp" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "andBExp" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "andBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "andBExp"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Block" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "emptyBlock" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "block" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Stmt" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "blockAsStmt" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "asgn" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "2"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "asgn" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "asgn" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "E" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "asgn"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "2"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "ite" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strict" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                , sortAttributes =
                                                    Attribute.Sort
                                                        { hook = Attribute.Hook Nothing
                                                        , smtlib = Attribute.Smtlib Nothing
                                                        }
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "R" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "ite" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "S1" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "S2" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "gamma" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "ite" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "HOLE" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes =
                        Attributes 
                            [ KorePattern
                                { getKorePattern = CofreeT
                                    { runCofreeT = Identity
                                        { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                            { applicationSymbolOrAlias =
                                                SymbolOrAlias
                                                    { symbolOrAliasConstructor = (Id "strictAxiom" AstLocationNone) :: Id Object
                                                    , symbolOrAliasParams = []
                                                    }
                                            , applicationChildren =
                                                [ CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "ite"))
                                                        }
                                                    }
                                                , CofreeT
                                                    { runCofreeT = Identity
                                                        { runIdentity = UnifiedMeta Null :< UnifiedMetaPattern (StringLiteralPattern (StringLiteral "1"))
                                                        }
                                                    }
                                                ]
                                            })
                                        }
                                    }
                                }
                            ]
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "while" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "seq" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Pgm" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "pgm" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "List" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortActualSort SortActual
                                    { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                    , sortActualSorts = []
                                    , sortAttributes =
                                        Attribute.Sort
                                            { hook = Attribute.Hook Nothing
                                            , smtlib = Attribute.Smtlib Nothing
                                            }
                                    }
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Pgm" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        , Module
            { moduleName = ModuleName "IMP"
            , moduleSentences =
                [ MetaSentence (SentenceImportSentence SentenceImport
                    { sentenceImportModuleName =
                        ModuleName "IMP-SYNTAX"
                    , sentenceAxiomAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Cfg" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "cfg" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "TopCell" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Cfg" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "TopCell" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "topcell" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "TopCell" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "KCell" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "kcell" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "K" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "StateCell" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "statecell" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                            , sortActualSorts =
                                [ SortActualSort SortActual
                                    { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                    , sortActualSorts = []
                                    , sortAttributes =
                                        Attribute.Sort
                                            { hook = Attribute.Hook Nothing
                                            , smtlib = Attribute.Smtlib Nothing
                                            }
                                    }
                                , SortActualSort SortActual
                                    { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                    , sortActualSorts = []
                                    , sortAttributes =
                                        Attribute.Sort
                                            { hook = Attribute.Hook Nothing
                                            , smtlib = Attribute.Smtlib Nothing
                                            }
                                    }
                                ]
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            , sortAttributes =
                                Attribute.Sort
                                    { hook = Attribute.Hook Nothing
                                    , smtlib = Attribute.Smtlib Nothing
                                    }
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts =
                                                                            [ SortActualSort SortActual
                                                                                { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                            , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                            ]
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                , sortActualSorts =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts =
                                                                                            [ SortActualSort SortActual
                                                                                                { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                            , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                            ]
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "kcell" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "idAsAExp" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "I" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "statecell" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "merge" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "merge" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    , SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "DOT2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "bind" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "I" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "DOT3" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    , SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "neqInt" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "zero" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren = []
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                , sortActualSorts =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                    ]
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                                        { rewritesSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        , rewritesFirst =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "divAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        , rewritesSecond =
                                                                            CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "divInt" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "plusAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "plusInt" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "AExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "minusAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "minusInt" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "zero" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren = []
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "leqBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "leqInt" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "I2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "notBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "andBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren = []
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "andBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren = []
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "UNDERSCORE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren = []
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "emptyBlock" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren = []
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "nothing" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "blockAsStmt" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "block" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortActualSort SortActual
                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts =
                                                                            [ SortActualSort SortActual
                                                                                { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                            , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                            ]
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                        , variableCounter = Nothing
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                , sortActualSorts =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts =
                                                                                            [ SortActualSort SortActual
                                                                                                { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                            , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                            ]
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                , sortAttributes =
                                                                                    Attribute.Sort
                                                                                        { hook = Attribute.Hook Nothing
                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                        }
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "kcell" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                                                                        { rewritesSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        , rewritesFirst =
                                                                                                            CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams =
                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                                            SymbolOrAlias
                                                                                                                                                { symbolOrAliasConstructor = (Id "asgn" AstLocationNone) :: Id Object
                                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                                }
                                                                                                                                        , applicationChildren =
                                                                                                                                            [ CofreeT
                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                                                        , variableCounter = Nothing
                                                                                                                                                        , variableSort =
                                                                                                                                                            SortActualSort SortActual
                                                                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                                , sortActualSorts = []
                                                                                                                                                                , sortAttributes =
                                                                                                                                                                    Attribute.Sort
                                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                        }
                                                                                                                                                                }
                                                                                                                                                        })
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            , CofreeT
                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                                                            SymbolOrAlias
                                                                                                                                                                { symbolOrAliasConstructor = (Id "intAsAExp" AstLocationNone) :: Id Object
                                                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                                                }
                                                                                                                                                        , applicationChildren =
                                                                                                                                                            [ CofreeT
                                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                                                        { variableName = (Id "I" AstLocationNone) :: Id Object
                                                                                                                                                                        , variableCounter = Nothing
                                                                                                                                                                        , variableSort =
                                                                                                                                                                            SortActualSort SortActual
                                                                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                                                                , sortActualSorts = []
                                                                                                                                                                                , sortAttributes =
                                                                                                                                                                                    Attribute.Sort
                                                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        })
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        })
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                        , rewritesSecond =
                                                                                                            CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "nothing" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                }
                                                                                                                        , applicationChildren = []
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "DOT1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "statecell" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "merge" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "merge" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    , SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "DOT2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "bind" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                                                                                        { rewritesSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts = []
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        , rewritesFirst =
                                                                                                                            CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "UNDERSCORE" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                        , rewritesSecond =
                                                                                                                            CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "I" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "DOT3" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    , SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "seq" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "arrow" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S1" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S2" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "ite" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren = []
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "UNDERSCORE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "blockAsStmt" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "ite" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "boolAsBExp" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren = []
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "UNDERSCORE" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "blockAsStmt" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "while" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "ite" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "block" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "seq" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams = []
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "blockAsStmt" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            , CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "while" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "B" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "BExp" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            , CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Block" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "emptyBlock" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren = []
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ImpliesPattern Implies
                                        { impliesSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , impliesFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "inSet" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "keys" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                        { variableName = (Id "Rho" AstLocationNone) :: Id Object
                                                                                                                        , variableCounter = Nothing
                                                                                                                        , variableSort =
                                                                                                                            SortActualSort SortActual
                                                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                                                , sortActualSorts =
                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    , SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                , sortAttributes =
                                                                                                                                    Attribute.Sort
                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                        }
                                                                                                                                }
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        , impliesSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    , SortActualSort SortActual
                                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts =
                                                                                            [ SortActualSort SortActual
                                                                                                { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                            , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                            ]
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "KCell" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    , SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts =
                                                                                                            [ SortActualSort SortActual
                                                                                                                { sortActualName = (Id "StateCell" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                            , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                                                            ]
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "kcell" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Pgm" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren =
                                                                                                            [ CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "pgm" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                                                                                                        { rewritesSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "List" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts =
                                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                        , sortActualSorts = []
                                                                                                                                                        , sortAttributes =
                                                                                                                                                            Attribute.Sort
                                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                }
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        , rewritesFirst =
                                                                                                                                            CofreeT
                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                                                            SymbolOrAlias
                                                                                                                                                                { symbolOrAliasConstructor = (Id "cons" AstLocationNone) :: Id Object
                                                                                                                                                                , symbolOrAliasParams =
                                                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                                        , sortActualSorts = []
                                                                                                                                                                        , sortAttributes =
                                                                                                                                                                            Attribute.Sort
                                                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                                }
                                                                                                                                                                        }
                                                                                                                                                                    ]
                                                                                                                                                                }
                                                                                                                                                        , applicationChildren =
                                                                                                                                                            [ CofreeT
                                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                                                                        , variableCounter = Nothing
                                                                                                                                                                        , variableSort =
                                                                                                                                                                            SortActualSort SortActual
                                                                                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                                                , sortActualSorts = []
                                                                                                                                                                                , sortAttributes =
                                                                                                                                                                                    Attribute.Sort
                                                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        })
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            , CofreeT
                                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                                                        { variableName = (Id "Xs" AstLocationNone) :: Id Object
                                                                                                                                                                        , variableCounter = Nothing
                                                                                                                                                                        , variableSort =
                                                                                                                                                                            SortActualSort SortActual
                                                                                                                                                                                { sortActualName = (Id "List" AstLocationNone) :: Id Object
                                                                                                                                                                                , sortActualSorts =
                                                                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                                                        , sortActualSorts = []
                                                                                                                                                                                        , sortAttributes =
                                                                                                                                                                                            Attribute.Sort
                                                                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                                                }
                                                                                                                                                                                        }
                                                                                                                                                                                    ]
                                                                                                                                                                                , sortAttributes =
                                                                                                                                                                                    Attribute.Sort
                                                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        })
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        })
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                        , rewritesSecond =
                                                                                                                                            CofreeT
                                                                                                                                                { runCofreeT = Identity
                                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                                        { variableName = (Id "Xs" AstLocationNone) :: Id Object
                                                                                                                                                        , variableCounter = Nothing
                                                                                                                                                        , variableSort =
                                                                                                                                                            SortActualSort SortActual
                                                                                                                                                                { sortActualName = (Id "List" AstLocationNone) :: Id Object
                                                                                                                                                                , sortActualSorts =
                                                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                                        , sortActualSorts = []
                                                                                                                                                                        , sortAttributes =
                                                                                                                                                                            Attribute.Sort
                                                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                                }
                                                                                                                                                                        }
                                                                                                                                                                    ]
                                                                                                                                                                , sortAttributes =
                                                                                                                                                                    Attribute.Sort
                                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                                        }
                                                                                                                                                                }
                                                                                                                                                        })
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            , CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "UNDERSCORE" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "statecell" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "merge" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams =
                                                                                                    [ SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    , SortActualSort SortActual
                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                        , sortActualSorts = []
                                                                                                        , sortAttributes =
                                                                                                            Attribute.Sort
                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "Rho" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                                                                        { rewritesSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Map" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    , SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        , rewritesFirst =
                                                                                                            CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "emp" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams =
                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    , SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                        , applicationChildren = []
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                        , rewritesSecond =
                                                                                                            CofreeT
                                                                                                                { runCofreeT = Identity
                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                            SymbolOrAlias
                                                                                                                                { symbolOrAliasConstructor = (Id "bind" AstLocationNone) :: Id Object
                                                                                                                                , symbolOrAliasParams =
                                                                                                                                    [ SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    , SortActualSort SortActual
                                                                                                                                        { sortActualName = (Id "Int" AstLocationNone) :: Id Object
                                                                                                                                        , sortActualSorts = []
                                                                                                                                        , sortAttributes =
                                                                                                                                            Attribute.Sort
                                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                        , applicationChildren =
                                                                                                                            [ CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                                                                        , variableCounter = Nothing
                                                                                                                                        , variableSort =
                                                                                                                                            SortActualSort SortActual
                                                                                                                                                { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                                                , sortActualSorts = []
                                                                                                                                                , sortAttributes =
                                                                                                                                                    Attribute.Sort
                                                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            , CofreeT
                                                                                                                                { runCofreeT = Identity
                                                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                                                        { applicationSymbolOrAlias =
                                                                                                                                            SymbolOrAlias
                                                                                                                                                { symbolOrAliasConstructor = (Id "zero" AstLocationNone) :: Id Object
                                                                                                                                                , symbolOrAliasParams = []
                                                                                                                                                }
                                                                                                                                        , applicationChildren = []
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        })
                                                                                                                    }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                        { applicationSymbolOrAlias =
                                            SymbolOrAlias
                                                { symbolOrAliasConstructor = (Id "app" AstLocationNone) :: Id Object
                                                , symbolOrAliasParams =
                                                    [ SortActualSort SortActual
                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        , sortAttributes =
                                                            Attribute.Sort
                                                                { hook = Attribute.Hook Nothing
                                                                , smtlib = Attribute.Smtlib Nothing
                                                                }
                                                        }
                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                    ]
                                                }
                                        , applicationChildren =
                                            [ CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "C" AstLocationNone) :: Id Object
                                                        , variableCounter = Nothing
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Ctxt" AstLocationNone) :: Id Object
                                                                , sortActualSorts =
                                                                    [ SortActualSort SortActual
                                                                        { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                        , sortActualSorts = []
                                                                        , sortAttributes =
                                                                            Attribute.Sort
                                                                                { hook = Attribute.Hook Nothing
                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                }
                                                                        }
                                                                    , SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                                    ]
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        })
                                                    }
                                                }
                                            , CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (RewritesPattern Rewrites
                                                        { rewritesSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "K" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                , sortAttributes =
                                                                    Attribute.Sort
                                                                        { hook = Attribute.Hook Nothing
                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                        }
                                                                }
                                                        , rewritesFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Pgm" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                        { applicationSymbolOrAlias =
                                                                                            SymbolOrAlias
                                                                                                { symbolOrAliasConstructor = (Id "pgm" AstLocationNone) :: Id Object
                                                                                                , symbolOrAliasParams = []
                                                                                                }
                                                                                        , applicationChildren =
                                                                                            [ CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                                                        { applicationSymbolOrAlias =
                                                                                                            SymbolOrAlias
                                                                                                                { symbolOrAliasConstructor = (Id "nil" AstLocationNone) :: Id Object
                                                                                                                , symbolOrAliasParams =
                                                                                                                    [ SortActualSort SortActual
                                                                                                                        { sortActualName = (Id "Id" AstLocationNone) :: Id Object
                                                                                                                        , sortActualSorts = []
                                                                                                                        , sortAttributes =
                                                                                                                            Attribute.Sort
                                                                                                                                { hook = Attribute.Hook Nothing
                                                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                                                }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                        , applicationChildren = []
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            , CofreeT
                                                                                                { runCofreeT = Identity
                                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                                        , variableCounter = Nothing
                                                                                                        , variableSort =
                                                                                                            SortActualSort SortActual
                                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                                , sortActualSorts = []
                                                                                                                , sortAttributes =
                                                                                                                    Attribute.Sort
                                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                                        }
                                                                                                                }
                                                                                                        })
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        , rewritesSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "asK" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams =
                                                                                    [ SortActualSort SortActual
                                                                                        { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                        , sortActualSorts = []
                                                                                        , sortAttributes =
                                                                                            Attribute.Sort
                                                                                                { hook = Attribute.Hook Nothing
                                                                                                , smtlib = Attribute.Smtlib Nothing
                                                                                                }
                                                                                        }
                                                                                    ]
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = UnifiedObject Null :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "S" AstLocationNone) :: Id Object
                                                                                        , variableCounter = Nothing
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Stmt" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                , sortAttributes =
                                                                                                    Attribute.Sort
                                                                                                        { hook = Attribute.Hook Nothing
                                                                                                        , smtlib = Attribute.Smtlib Nothing
                                                                                                        }
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                            ]
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        ]
    }