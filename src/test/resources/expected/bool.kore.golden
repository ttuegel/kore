Definition
    { definitionAttributes = Attributes []
    , definitionModules =
        [ Module
            { moduleName = ModuleName "BOOL"
            , moduleSentences =
                [ ObjectSentence (SentenceSortSentence SentenceSort
                    { sentenceSortName = (Id "Bool" AstLocationNone) :: Id Object
                    , sentenceSortParameters = []
                    , sentenceSortAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "true" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "false" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts = []
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "andBool" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "orBool" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                        , SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , ObjectSentence (SentenceSymbolSentence SentenceSymbol
                    { sentenceSymbolSymbol =
                        Symbol
                            { symbolConstructor = (Id "notBool" AstLocationNone) :: Id Object
                            , symbolParams = []
                            }
                    , sentenceSymbolSorts =
                        [ SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                        ]
                    , sentenceSymbolReturnSort =
                        SortActualSort SortActual
                            { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                            , sortActualSorts = []
                            }
                    , sentenceSymbolAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (OrPattern Or
                                        { orSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , orFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        , orSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters = []
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (NotPattern Not
                                        { notSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , notChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (AndPattern And
                                                        { andSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        , andFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        , andSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "andBool" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "orBool" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            , CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "Y" AstLocationNone) :: Id Object
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (ExistsPattern Exists
                                        { existsSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , existsVariable =
                                            Variable
                                                { variableName = (Id "T" AstLocationNone) :: Id Object
                                                , variableSort =
                                                    SortActualSort SortActual
                                                        { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                        , sortActualSorts = []
                                                        }
                                                }
                                        , existsChild =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                                        { equalsOperandSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        , equalsResultSort =
                                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                                        , equalsFirst =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "T" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                        , equalsSecond =
                                                            CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren =
                                                                            [ CofreeT
                                                                                { runCofreeT = Identity
                                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                                        , variableSort =
                                                                                            SortActualSort SortActual
                                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                                , sortActualSorts = []
                                                                                                }
                                                                                        })
                                                                                    }
                                                                                }
                                                                            ]
                                                                        })
                                                                    }
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "andBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "andBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "orBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "orBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            , CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                                        , variableSort =
                                                                            SortActualSort SortActual
                                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                                , sortActualSorts = []
                                                                                }
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (VariablePattern Variable
                                                        { variableName = (Id "X" AstLocationNone) :: Id Object
                                                        , variableSort =
                                                            SortActualSort SortActual
                                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                                , sortActualSorts = []
                                                                }
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                , MetaSentence (SentenceAxiomSentence SentenceAxiom
                    { sentenceAxiomParameters =
                        [ UnifiedObject (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                        ]
                    , sentenceAxiomPattern =
                        KorePattern
                            { getKorePattern = CofreeT
                                { runCofreeT = Identity
                                    { runIdentity = () :< UnifiedObjectPattern (EqualsPattern Equals
                                        { equalsOperandSort =
                                            SortActualSort SortActual
                                                { sortActualName = (Id "Bool" AstLocationNone) :: Id Object
                                                , sortActualSorts = []
                                                }
                                        , equalsResultSort =
                                            SortVariableSort (SortVariable ((Id "S" AstLocationNone) :: Id Object))
                                        , equalsFirst =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "notBool" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren =
                                                            [ CofreeT
                                                                { runCofreeT = Identity
                                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                                        { applicationSymbolOrAlias =
                                                                            SymbolOrAlias
                                                                                { symbolOrAliasConstructor = (Id "false" AstLocationNone) :: Id Object
                                                                                , symbolOrAliasParams = []
                                                                                }
                                                                        , applicationChildren = []
                                                                        })
                                                                    }
                                                                }
                                                            ]
                                                        })
                                                    }
                                                }
                                        , equalsSecond =
                                            CofreeT
                                                { runCofreeT = Identity
                                                    { runIdentity = () :< UnifiedObjectPattern (ApplicationPattern Application
                                                        { applicationSymbolOrAlias =
                                                            SymbolOrAlias
                                                                { symbolOrAliasConstructor = (Id "true" AstLocationNone) :: Id Object
                                                                , symbolOrAliasParams = []
                                                                }
                                                        , applicationChildren = []
                                                        })
                                                    }
                                                }
                                        })
                                    }
                                }
                            }
                    , sentenceAxiomAttributes = Attributes []
                    })
                ]
            , moduleAttributes = Attributes []
            }
        ]
    }