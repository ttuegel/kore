    {
      Result
    #Equals
      <T>
        <k>
          .
        </k>
        <state>
          max |-> ?I0:Int
          x |-> ?I:Int
          y |-> ?I0:Int
          z |-> ?I1:Int
        </state>
      </T>
    }
  #And
    {
      false
    #Equals
      ?I0 <=Int ?I1
    }
  #And
    {
      true
    #Equals
      ?I <=Int ?I0
    }
#Or
    {
      Result
    #Equals
      <T>
        <k>
          .
        </k>
        <state>
          max |-> ?I1:Int
          x |-> ?I:Int
          y |-> ?I0:Int
          z |-> ?I1:Int
        </state>
      </T>
    }
  #And
    {
      false
    #Equals
      ?I <=Int ?I0
    }
  #And
    {
      true
    #Equals
      ?I <=Int ?I1
    }
#Or
    {
      Result
    #Equals
      <T>
        <k>
          .
        </k>
        <state>
          max |-> ?I1:Int
          x |-> ?I:Int
          y |-> ?I0:Int
          z |-> ?I1:Int
        </state>
      </T>
    }
  #And
    {
      true
    #Equals
      ?I0 <=Int ?I1
    }
  #And
    {
      true
    #Equals
      ?I <=Int ?I0
    }
#Or
    {
      Result
    #Equals
      <T>
        <k>
          .
        </k>
        <state>
          max |-> ?I:Int
          x |-> ?I:Int
          y |-> ?I0:Int
          z |-> ?I1:Int
        </state>
      </T>
    }
  #And
    {
      false
    #Equals
      ?I <=Int ?I0
    }
  #And
    {
      false
    #Equals
      ?I <=Int ?I1
    }
